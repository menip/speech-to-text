#!/usr/bin/env python
# This file was based on the openssl module's SCsub

import os  # system()

Import('env')

module_env = env.Clone()

# Platform name
platform = env["platform"] or env["p"]

# -DHAVE_CONFIG_H allows compiling of libsphinxbase/util source files
module_flags = ['-O3', '-Wall', '-Wno-unused-result', '-DHAVE_CONFIG_H']
module_env.Append(CFLAGS=module_flags)

# ---------------------------------------------------------------------

stt_srcs = [
    "register_types.cpp",
    "stt_config.cpp",
    "stt_queue.cpp",
    "stt_runner.cpp",
    "stt_error.cpp",
    "file_dir_util.cpp"
]

# ---------------------------------------------------------------------

# Sphinxbase source files
base_dir = "sphinxbase"

base_srcs = [
    "libsphinxbase/feat/feat.c",
    "libsphinxbase/feat/cmn_live.c",
    "libsphinxbase/feat/lda.c",
    "libsphinxbase/feat/cmn.c",
    "libsphinxbase/feat/agc.c",
    "libsphinxbase/fe/fe_warp_inverse_linear.c",
    "libsphinxbase/fe/fe_warp_piecewise_linear.c",
    "libsphinxbase/fe/fe_noise.c",
    "libsphinxbase/fe/fe_prespch_buf.c",
    "libsphinxbase/fe/fe_sigproc.c",
    "libsphinxbase/fe/fixlog.c",
    "libsphinxbase/fe/yin.c",
    "libsphinxbase/fe/fe_interface.c",
    "libsphinxbase/fe/fe_warp.c",
    "libsphinxbase/fe/fe_warp_affine.c",
    "libsphinxbase/util/listelem_alloc.c",
    "libsphinxbase/util/genrand.c",
    "libsphinxbase/util/bitarr.c",
    "libsphinxbase/util/bitvec.c",
    "libsphinxbase/util/ckd_alloc.c",
    "libsphinxbase/util/dtoa.c",
    "libsphinxbase/util/mmio.c",
    "libsphinxbase/util/strfuncs.c",
    "libsphinxbase/util/blas_lite.c",
    "libsphinxbase/util/priority_queue.c",
    "libsphinxbase/util/slamch.c",
    "libsphinxbase/util/slapack_lite.c",
    "libsphinxbase/util/pio.c",
    "libsphinxbase/util/matrix.c",
    "libsphinxbase/util/f2c_lite.c",
    "libsphinxbase/util/bio.c",
    "libsphinxbase/util/filename.c",
    "libsphinxbase/util/cmd_ln.c",
    "libsphinxbase/util/sbthread.c",
    "libsphinxbase/util/err.c",
    "libsphinxbase/util/logmath.c",
    "libsphinxbase/util/glist.c",
    "libsphinxbase/util/profile.c",
    "libsphinxbase/util/case.c",
    "libsphinxbase/util/hash_table.c",
    "libsphinxbase/util/heap.c",
    "libsphinxbase/lm/jsgf_parser.c",
    "libsphinxbase/lm/ngram_model_set.c",
    "libsphinxbase/lm/fsg_model.c",
    "libsphinxbase/lm/lm_trie.c",
    "libsphinxbase/lm/ngram_model.c",
    "libsphinxbase/lm/lm_trie_quant.c",
    "libsphinxbase/lm/jsgf.c",
    "libsphinxbase/lm/ngram_model_trie.c",
    "libsphinxbase/lm/ngrams_raw.c",
    "libsphinxbase/lm/jsgf_scanner.c"
]

# Platform-specific files
if platform == "x11":
    # Use PulseAudio or ALSA as sound driver
    if (env["pulseaudio"] == "yes"):
        base_srcs.append("libsphinxad/ad_pulse.c")
    elif os.system("pkg-config --exists alsa") == 0:
        base_srcs.append("libsphinxad/ad_alsa.c")
        env.Append(LIBS=["-lasound"])
    else:
        print("[Speech to Text] Error: No PulseAudio or ALSA support found!")
        Exit(1)

elif platform == "windows":
    base_srcs.append("libsphinxad/ad_win32.c")

elif platform in ["osx", "iphone", "android"]:
    base_srcs.append("libsphinxad/ad_base.c")

else:
    print("[Speech to Text] Error: Platform '" + platform + "' not supported!")
    Exit(1)

# Add path to Sphinxbase include/ folder
base_inc_paths = [
    "include",
    "include/android",
    "include/sphinxbase",
    "include/win32",
    "include/wince"
]

base_srcs = [base_dir + "/src/" + file for file in base_srcs]
module_env.Append(CPPPATH=[base_dir + "/" + dir for dir in base_inc_paths])

# ---------------------------------------------------------------------

# Pocketsphinx source files
pocket_dir = "pocketsphinx"

pocket_srcs = [
    "ptm_mgau.c",
    "kws_detections.c",
    "hmm.c",
    "dict2pid.c",
    "kws_search.c",
    "ngram_search_fwdflat.c",
    "fsg_history.c",
    "ps_alignment.c",
    "ngram_search_fwdtree.c",
    "state_align_search.c",
    "ms_gauden.c",
    "ms_senone.c",
    "mdef.c",
    "s2_semi_mgau.c",
    "phone_loop_search.c",
    "acmod.c",
    "dict.c",
    "vector.c",
    "allphone_search.c",
    "ps_mllr.c",
    "fsg_lextree.c",
    "ngram_search.c",
    "ps_lattice.c",
    "ms_mgau.c",
    "bin_mdef.c",
    "fsg_search.c",
    "blkarray_list.c",
    "tmat.c",
    "pocketsphinx.c"
]

pocket_srcs = [pocket_dir + "/src/" + file for file in pocket_srcs]
module_env.Append(CPPPATH=pocket_dir + "/" + "include")

# ---------------------------------------------------------------------

all_srcs = base_srcs + pocket_srcs + stt_srcs

if ARGUMENTS.get('speech_to_text_shared', 'no') == 'yes':
    # Shared lib compilation
    module_env.Append(CXXFLAGS=['-fPIC'])  # Shared library flag
    module_env['LIBS'] = ["-lasound"] if platform == 'x11' else []

    shared_lib = module_env.SharedLibrary(target='#bin/speech_to_text',
                                          source=all_srcs)

    # Notify main env of new library dependency
    shared_lib_shim = shared_lib[0].name.rsplit('.', 1)[0]
    env.Append(LIBS=[shared_lib_shim])
    env.Append(LIBPATH=['#bin'])
else:
    # Static compilation
    module_env.add_source_files(env.modules_sources, all_srcs)
